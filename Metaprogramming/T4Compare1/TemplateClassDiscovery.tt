<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
<#= ExpandedTypeName(this.GetType())#> Information:
<#
PushIndent(" ");
WriteLine("Properties:");
PushIndent(" ");
foreach (var pi in this.GetType().GetProperties())
{
	Write("{0} {1} {{", ExpandedTypeName(pi.PropertyType), pi.Name);
	WriteLine("{0}{1} }}", pi.CanRead ? " get;" : "", pi.CanWrite ? " set;" : "");
}
PopIndent();
WriteLine("Methods:");
PushIndent(" ");
foreach (var mi in this.GetType().GetMethods())
{
	Write("{0} {1}(", ExpandedTypeName(mi.ReturnType), mi.Name);
	var parms = mi.GetParameters();
	if (parms != null)
	{
		for (int ndx = 0; ndx < parms.Length; ndx++)
		{
			Write((ndx > 0) ? ", {0} {1}" : "{0} {1}", ExpandedTypeName(parms[ndx].ParameterType), parms[ndx].Name);
		}
	}
	WriteLine(");");
}
ClearIndent();
WriteLine("Sessions: {0}", this.Session.Count());
foreach(var item in this.Session)
	WriteLine(item.Key);
#>
<#+
private string ExpandedTypeName2(Type t)
{
	var result = new StringBuilder();
	if (!t.IsGenericType)
		result.Append(t.Name);
	else
	{
		result.Append(t.Name.Substring(0, t.Name.IndexOf('`')));
		result.Append("<");
		int ndx = 0;
		foreach (var tp in t.GetGenericArguments())
			result.AppendFormat((ndx++ > 0) ? ", {0}" : "{0}", tp.Name);
		result.Append(">");
	}
	return result.ToString();
}
#>
<#+
private string ExpandedTypeName(Type t)
{
    if (!t.IsGenericType)
        return t.Name;
    else
        return string.Format("{0}<{1}>", 
            t.Name.Substring(0, t.Name.IndexOf('`')), 
            string.Join(", ",t.GetGenericArguments().Select(a => a.Name)));
}
#>